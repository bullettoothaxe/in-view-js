!function(root,factory){"function"==typeof define&&define.amd?define([],factory):"object"==typeof exports?module.exports=factory():root.Index=factory()}(this,function(){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();exports.InViewPort=function(){function InViewPort(){var $args=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_classCallCheck(this,InViewPort),this.el=$args.element,this.callback=$args.callback,this.overlapEl=$args.overlapEl,this.old_visible=null,this.handler=this.onVisibilityChange.bind(this),this.topDistance=this.getTopDistance()}return _createClass(InViewPort,[{key:"addListeners",value:function(){addEventListener("DOMContentLoaded",this.handler,!1),addEventListener("load",this.handler,!1),addEventListener("scroll",this.handler,!1),addEventListener("resize",this.handler,!1)}},{key:"removeListeners",value:function(){removeEventListener("DOMContentLoaded",this.handler,!1),removeEventListener("load",this.handler,!1),removeEventListener("scroll",this.handler,!1),removeEventListener("resize",this.handler,!1)}},{key:"onVisibilityChange",value:function(){var visible=this.isElementInViewport();visible!=this.old_visible&&(this.old_visible=visible,"function"==typeof this.callback&&this.callback(this.old_visible))}},{key:"getTopDistance",value:function(){var overlapHeight=this.overlapEl?this.overlapEl.getBoundingClientRect().height:0,elHeight=this.el.getBoundingClientRect().height||this.el.firstChild.getBoundingClientRect().height;return overlapHeight?overlapHeight-elHeight:0}},{key:"isElementInViewport",value:function(){var rect=this.el.getBoundingClientRect();return rect.top>=this.topDistance&&rect.left>=0&&rect.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&rect.right<=(window.innerWidth||document.documentElement.clientWidth)}}]),InViewPort}();return Index});